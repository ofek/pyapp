{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyApp","text":"CI/CD Docs Project Meta <p>PyApp is a wrapper for Python applications that bootstrap themselves at runtime.</p> You build User runs <p>See the how-to for a detailed example walkthrough.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easily build standalone binaries for every platform</li> <li>Optional management commands providing functionality such as self updates</li> <li>Extremely configurable runtime behavior allowing for targeting of different end users</li> </ul>"},{"location":"#license","title":"License","text":"<p>PyApp is distributed under the terms of any of the following licenses:</p> <ul> <li>Apache-2.0</li> <li>MIT</li> </ul>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released.</p> <p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"build/","title":"Building","text":"<p>Before building your application, you must configure your project at the very least.</p> <p>After you have done that, your application can be built using a local copy of this repository or via installation with Cargo.</p> <p>Tip</p> <p>For a more streamlined workflow, consider using the built-in app build target of Hatch.</p>"},{"location":"build/#local-repository","title":"Local repository","text":"<p>The recommended method of downloading the repository is via the <code>source</code> asset archives attached to each release.</p> <p>The latest release can always be downloaded at the following URLs:</p> <ul> <li>https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz</li> <li>https://github.com/ofek/pyapp/releases/latest/download/source.zip</li> </ul> <p>Specific releases may be downloaded at the following URLs, replacing <code>X.Y.Z</code> with the desired version:</p> <ul> <li>https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.tar.gz</li> <li>https://github.com/ofek/pyapp/releases/download/vX.Y.Z/source.zip</li> </ul> <p>After unpacking the repository, enter the directory and run:</p> <pre><code>cargo build --release\n</code></pre> <p>The executable will be located at <code>target/release/pyapp.exe</code> if on Windows or <code>target/release/pyapp</code> otherwise. If a particular target has been set (or when cross compiling since one will always be set), then the <code>release</code> directory will be nested one level deeper under <code>target/&lt;TARGET&gt;</code>.</p>"},{"location":"build/#installation","title":"Installation","text":"<p>Select the directory in which to build the executable with the <code>--root</code> option and run:</p> <pre><code>cargo install pyapp --force --root &lt;DIR&gt;\n</code></pre> <p>The executable will be located at <code>&lt;DIR&gt;/bin/pyapp.exe</code> if on Windows or <code>&lt;DIR&gt;/bin/pyapp</code> otherwise.</p> <p>Specific versions may be chosen with the <code>--version</code> flag.</p> <p>Note: If you want to cross compile, this method of building is currently unsupported.</p>"},{"location":"build/#cross-compilation","title":"Cross compilation","text":"<p>Configuration for cross is validated by CI to ensure all known environment variable options are passed through to the containers.</p> <p>When embedding the project or the distribution using a local path, you must use the local repository way of building and ensure that the configured files to embed reside within the repository and the options refer to relative paths.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0290-2025-10-15","title":"0.29.0 - 2025-10-15","text":"<p>Added:</p> <ul> <li>Update default CPython distributions to 20251014</li> <li>Update default PyPy distributions to 7.3.20</li> </ul>"},{"location":"changelog/#0280-2025-07-17","title":"0.28.0 - 2025-07-17","text":"<p>Added:</p> <ul> <li>Update default CPython distributions to 20250712</li> <li>Switch to <code>zlib-rs</code> for handling <code>.tar.gz</code> distributions</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#0270-2025-03-12","title":"0.27.0 - 2025-03-12","text":"<p>Added:</p> <ul> <li>Update default CPython distributions to 20250311</li> <li>Update dependencies</li> </ul> <p>Fixed:</p> <ul> <li>Fix compiler warnings on newer versions of Rust for use of the <code>FileExt</code> trait provided by the <code>fs4</code> crate</li> </ul>"},{"location":"changelog/#0260-2025-01-04","title":"0.26.0 - 2025-01-04","text":"<p>Added:</p> <ul> <li>Update default CPython distributions to 20241219</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#0250-2024-12-15","title":"0.25.0 - 2024-12-15","text":"<p>Added:</p> <ul> <li>Update default CPython distributions to 20241206</li> <li>Enable LTO for releases</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#0240-2024-10-13","title":"0.24.0 - 2024-10-13","text":"<p>Changed:</p> <ul> <li>The <code>PYAPP_DISTRIBUTION_VARIANT</code> has been renamed to <code>PYAPP_DISTRIBUTION_VARIANT_CPU</code> although the former is still supported for backwards compatibility</li> </ul> <p>Added:</p> <ul> <li>Support Python 3.13 and set as the default version</li> <li>Add <code>PYAPP_DISTRIBUTION_VARIANT_GIL</code> option (Python 3.13+)</li> <li>Update default CPython distributions to 20241008</li> <li>Update default PyPy distributions to 7.3.17</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#0230-2024-08-03","title":"0.23.0 - 2024-08-03","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_UV_SOURCE</code> option</li> </ul>"},{"location":"changelog/#0220-2024-05-26","title":"0.22.0 - 2024-05-26","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_EXPOSE_ALL_COMMANDS</code> option</li> <li>Update dependencies</li> </ul>"},{"location":"changelog/#0211-2024-05-15","title":"0.21.1 - 2024-05-15","text":"<p>Fixed:</p> <ul> <li>Fix the <code>PYAPP_DISTRIBUTION_PATH_PREFIX</code> option</li> </ul>"},{"location":"changelog/#0210-2024-05-15","title":"0.21.0 - 2024-05-15","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_DISTRIBUTION_PATH_PREFIX</code> option for easier configuring of custom distribution internal paths</li> <li>Add <code>PYAPP_ALLOW_UPDATES</code> option for enabling the <code>update</code> management command when project installation is skipped</li> </ul> <p>Fixed:</p> <ul> <li>Properly hide the <code>update</code> management command when skipping project installation</li> </ul>"},{"location":"changelog/#0201-2024-05-14","title":"0.20.1 - 2024-05-14","text":"<p>Fixed:</p> <ul> <li>Properly handle failed downloads</li> </ul>"},{"location":"changelog/#0200-2024-05-13","title":"0.20.0 - 2024-05-13","text":"<p>Added:</p> <ul> <li>Add <code>cache</code> management command</li> <li>Update dependencies</li> </ul> <p>Fixed:</p> <ul> <li>Bootstrapping is now safe across multiple processes (a shared resource message is displayed if another process is already bootstrapping)</li> <li>The <code>pip</code> management command is now resilient to cache removal</li> <li>Management commands now properly support the <code>-h</code>/<code>--help</code> flag</li> </ul>"},{"location":"changelog/#0190-2024-04-24","title":"0.19.0 - 2024-04-24","text":"<p>Added:</p> <ul> <li>Add <code>remove</code> management command</li> <li>Update dependencies</li> </ul> <p>Fixed:</p> <ul> <li>Fix UV and the <code>VIRTUAL_ENV</code> environment variable on non-Windows systems</li> </ul>"},{"location":"changelog/#0180-2024-04-22","title":"0.18.0 - 2024-04-22","text":"<p>Added:</p> <ul> <li>Update PyPy distributions to 7.3.15</li> </ul> <p>Fixed:</p> <ul> <li>Fix resolution for legacy 3.7 builds</li> </ul>"},{"location":"changelog/#0170-2024-04-21","title":"0.17.0 - 2024-04-21","text":"<p>Added:</p> <ul> <li>Support using UV for virtual environment creation and project installation</li> <li>The PATH environment variable is now updated to include the installation's directory of executables</li> <li>Update default distributions to 20240415</li> </ul> <p>Fixed:</p> <ul> <li>Dependencies are now locked</li> </ul>"},{"location":"changelog/#0160-2024-03-24","title":"0.16.0 - 2024-03-24","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_IS_GUI</code> option to support graphical applications</li> </ul>"},{"location":"changelog/#0151-2024-03-03","title":"0.15.1 - 2024-03-03","text":"<p>Fixed:</p> <ul> <li>Fix reading metadata with Windows line endings during build time from embedded distributions</li> </ul>"},{"location":"changelog/#0150-2024-03-01","title":"0.15.0 - 2024-03-01","text":"<p>Added:</p> <ul> <li>Update default distributions to 20240224</li> <li>Update default Python version to 3.12</li> <li>Statically link the C runtime on Windows</li> <li>Add <code>PYAPP_PROJECT_FEATURES</code> option for selecting extras</li> <li>Add new execution mode option <code>PYAPP_EXEC_NOTEBOOK</code> for running Jupyter notebooks</li> </ul> <p>Fixed:</p> <ul> <li>Properly resolve correct default distributions on MinGW-w64</li> <li>Fix embedding custom distributions</li> <li>Ignore nonexistent variant options for 3.7 distributions</li> </ul>"},{"location":"changelog/#0140-2024-01-21","title":"0.14.0 - 2024-01-21","text":"<p>Added:</p> <ul> <li>Update default distributions to 20240107</li> </ul>"},{"location":"changelog/#0130-2023-12-31","title":"0.13.0 - 2023-12-31","text":"<p>Added:</p> <ul> <li>Allow for forwarding of unknown management commands e.g. if apps have their own <code>self</code> commands</li> </ul> <p>Fixed:</p> <ul> <li>Remove patch for powerpc64le now that the transitive dependency <code>ring</code> is fixed</li> </ul>"},{"location":"changelog/#0120-2023-10-07","title":"0.12.0 - 2023-10-07","text":"<p>Added:</p> <ul> <li>Update default distributions to 20231002, adding support for Python 3.12</li> </ul>"},{"location":"changelog/#0111-2023-09-14","title":"0.11.1 - 2023-09-14","text":"<p>Fixed:</p> <ul> <li>Fix the Python path for the <code>pypy2.7</code> distribution</li> </ul>"},{"location":"changelog/#0110-2023-09-07","title":"0.11.0 - 2023-09-07","text":"<p>Added:</p> <ul> <li>Update default distributions to 20230826</li> <li>Build releases with codegen-units=1</li> </ul>"},{"location":"changelog/#0101-2023-06-26","title":"0.10.1 - 2023-06-26","text":"<p>Fixed:</p> <ul> <li>Fix regression in the <code>PYAPP_EXEC_SPEC</code> option</li> </ul>"},{"location":"changelog/#0100-2023-06-26","title":"0.10.0 - 2023-06-26","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_EXEC_SCRIPT</code> option for executing a project using a script</li> <li>Add support for overriding the installation directory</li> <li>Make the <code>PYAPP_DISTRIBUTION_PATH</code> option implicitly enable <code>PYAPP_DISTRIBUTION_EMBED</code></li> </ul> <p>Fixed:</p> <ul> <li>Properly handle cases where options contain line feed characters</li> </ul>"},{"location":"changelog/#090-2023-06-21","title":"0.9.0 - 2023-06-21","text":"<p>Changed:</p> <ul> <li>Custom distributions should now define the relative path to the <code>site-packages</code> directory</li> </ul> <p>Added:</p> <ul> <li>Add support for PyPy distributions</li> <li>Add the <code>PYAPP_UPGRADE_VIRTUALENV</code> option to create virtual environments with <code>virtualenv</code> rather than the stdlib's <code>venv</code></li> <li>Add support for custom distributions with <code>bzip2</code> compression</li> </ul> <p>Fixed:</p> <ul> <li>Properly handle cases where temporary files are on different filesystems</li> <li>Fix regression in the <code>metadata</code> management command on Windows</li> <li>Improve error messages when running binaries that were misconfigured</li> </ul>"},{"location":"changelog/#080-2023-06-09","title":"0.8.0 - 2023-06-09","text":"<p>Added:</p> <ul> <li>Add the ability to externally manage pip with the <code>PYAPP_PIP_EXTERNAL</code> and <code>PYAPP_PIP_VERSION</code> options</li> <li>Allow for project installation with a dependency file using the <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> option</li> <li>Add management command to directly invoke pip with the installed Python</li> <li>Add management command to output the path to the installed Python</li> </ul> <p>Fixed:</p> <ul> <li>Fix builds for PowerPC64</li> </ul>"},{"location":"changelog/#070-2023-05-24","title":"0.7.0 - 2023-05-24","text":"<p>Changed:</p> <ul> <li>Installations use virtual environments by default; the previous behavior can be enabled with the <code>PYAPP_FULL_ISOLATION</code> option</li> </ul> <p>Added:</p> <ul> <li>Update default CPython distributions</li> <li>Add <code>-r</code>/<code>--restore</code> flag to the <code>update</code> command</li> <li>Allow for disabling of management commands</li> <li>Add ability to expose optional commands</li> <li>Add optional command to directly invoke the installed Python</li> <li>Run Python in isolated mode</li> <li>Execute projects with <code>execvp</code> on non-Windows systems</li> <li>When the management command is enabled its name is available at runtime via an environment variable</li> <li>Add different installation wait message for when there is a guarantee of no side effects (e.g. pip's <code>--only-binary :all:</code>)</li> </ul>"},{"location":"changelog/#060-2023-05-16","title":"0.6.0 - 2023-05-16","text":"<p>Added:</p> <ul> <li>Add <code>PYAPP_PROJECT_PATH</code> option to embed the project for installation at runtime</li> <li>Add <code>PYAPP_DISTRIBUTION_PATH</code> option to embed the distribution from a local path rather than fetching the source</li> </ul> <p>Fixed:</p> <ul> <li>Properly handle distributions packed as ZIP files</li> </ul>"},{"location":"changelog/#050-2023-05-11","title":"0.5.0 - 2023-05-11","text":"<p>Added:</p> <ul> <li>Strip symbols from release builds</li> </ul> <p>Fixed:</p> <ul> <li>Properly pass through all required environment variable options to cross compilation images</li> <li>Properly allow configuration of the template used for the metadata command</li> </ul>"},{"location":"changelog/#040-2023-05-11","title":"0.4.0 - 2023-05-11","text":"<p>Changed:</p> <ul> <li>Rename <code>PYAPP_STARSHIP_PROMPT</code> option to <code>PYAPP_METADATA_TEMPLATE</code></li> </ul> <p>Added:</p> <ul> <li>Add <code>PYAPP_PIP_EXTRA_ARGS</code> option to provide extra <code>pip install</code> arguments</li> <li>Add <code>PYAPP_PIP_ALLOW_CONFIG</code> option to allow runtime configuration of <code>pip</code></li> <li>Add configuration for correct cross compilation</li> </ul>"},{"location":"changelog/#031-2023-05-10","title":"0.3.1 - 2023-05-10","text":"<p>Fixed:</p> <ul> <li>Fix default distribution detection for Linux on architectures other than x86_64</li> </ul>"},{"location":"changelog/#030-2023-05-10","title":"0.3.0 - 2023-05-10","text":"<p>Changed:</p> <ul> <li>Rename <code>PYAPP_DISTRIBUTION_COMPRESSION</code> option to <code>PYAPP_DISTRIBUTION_FORMAT</code></li> </ul> <p>Added:</p> <ul> <li>Add <code>--pre</code> flag to the <code>self update</code> command to allow pre-release and development versions</li> <li>Add environment variable for detection</li> <li>Add <code>PYAPP_SELF_COMMAND</code> option to control the name of the management command</li> <li>Add <code>PYAPP_SKIP_INSTALL</code> option to skip project installation</li> <li>Remove dependence on OpenSSL</li> </ul> <p>Fixed:</p> <ul> <li>Properly display error messages from <code>pip install</code> commands</li> <li>Fix project version reading for the metadata command on non-Windows systems</li> </ul>"},{"location":"changelog/#020-2023-05-07","title":"0.2.0 - 2023-05-07","text":"<p>This is the initial public release.</p>"},{"location":"examples/","title":"Examples","text":"<p>The following examples do not illustrate every possible combination of options but rather some common use cases.</p>"},{"location":"examples/#single-project-basic","title":"Single project basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code>"},{"location":"examples/#single-project-embedded","title":"Single project embedded","text":"Option Value <code>PYAPP_PROJECT_PATH</code> <code>./proj-X.Y.Z.dev0-py3-none-any.whl</code>"},{"location":"examples/#dependency-file-basic","title":"Dependency file basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <p>Note</p> <p>The default execution will be <code>python -m proj</code> at runtime.</p>"},{"location":"examples/#dependency-file-with-script","title":"Dependency file with script","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <code>PYAPP_EXEC_SCRIPT</code> <code>./script.py</code>"},{"location":"examples/#execution-with-object-reference","title":"Execution with object reference","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_EXEC_SPEC</code> <code>proj.cli:main</code>"},{"location":"examples/#specific-known-distribution","title":"Specific known distribution","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PYTHON_VERSION</code> <code>3.10</code>"},{"location":"examples/#custom-remote-distribution-basic","title":"Custom remote distribution basic","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_SOURCE</code> <code>https://foo.bar.baz/archive.tar.gz</code>"},{"location":"examples/#custom-remote-distribution-embedded","title":"Custom remote distribution embedded","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_SOURCE</code> <code>https://foo.bar.baz/archive.tar.gz</code> <code>PYAPP_DISTRIBUTION_EMBED</code> <code>true</code>"},{"location":"examples/#custom-embedded-local-distribution","title":"Custom embedded local distribution","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_DISTRIBUTION_PATH</code> <code>./archive.tar.gz</code>"},{"location":"examples/#offline-installation","title":"Offline installation","text":"Option Value <code>PYAPP_PROJECT_PATH</code> <code>./proj-X.Y.Z-py3-none-any.whl</code> <code>PYAPP_DISTRIBUTION_PATH</code> <code>./archive.tar.gz</code> <code>PYAPP_PIP_EXTRA_ARGS</code> <code>--no-deps</code>"},{"location":"examples/#reproducible-installation-with-custom-package-index","title":"Reproducible installation with custom package index","text":"Option Value <code>PYAPP_PROJECT_NAME</code> <code>proj</code> <code>PYAPP_PROJECT_VERSION</code> <code>X.Y.Z</code> <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> <code>./requirements.txt</code> <code>PYAPP_PIP_EXTRA_ARGS</code> <code>--only-binary :all: --index-url URL</code>"},{"location":"how-to/","title":"How-to","text":"<p>What follows is a short example showing the end-to-end experience from building an application to running the application as a user.</p>"},{"location":"how-to/#install-rust","title":"Install Rust","text":"<p>Follow the instructions to install Rust and make sure the package manager Cargo is on your PATH.</p>"},{"location":"how-to/#get-pyapp","title":"Get PyApp","text":"<p>In order to build applications with PyApp, you must first download the source code. Here we will download the latest release.</p> Linux/macOSWindows <ol> <li><code>curl https://github.com/ofek/pyapp/releases/latest/download/source.tar.gz -Lo pyapp-source.tar.gz</code></li> <li><code>tar -xzf pyapp-source.tar.gz</code></li> <li><code>mv pyapp-v* pyapp-latest</code></li> <li><code>cd pyapp-latest</code></li> </ol> <ol> <li><code>Invoke-WebRequest https://github.com/ofek/pyapp/releases/latest/download/source.zip -OutFile pyapp-source.zip</code></li> <li><code>7z x pyapp-source.zip</code></li> <li><code>mv pyapp-v* pyapp-latest</code></li> <li><code>cd pyapp-latest</code></li> </ol>"},{"location":"how-to/#configuration","title":"Configuration","text":"<p>You must configure the binaries PyApp produces with environment variables. There are many ways to configure applications but here we will define a single package to install from PyPI at a specific version:</p> Option Value <code>PYAPP_PROJECT_NAME</code> <code>cowsay</code> <code>PYAPP_PROJECT_VERSION</code> <code>6.0</code>"},{"location":"how-to/#building","title":"Building","text":"<p>Run:</p> <pre><code>cargo build --release\n</code></pre> <p>The executable will be located at <code>target/release/pyapp.exe</code> if on Windows or <code>target/release/pyapp</code> otherwise.</p>"},{"location":"how-to/#distribution","title":"Distribution","text":"<p>Be sure to rename the binary to the name of the application (and make it executable on non-Windows systems):</p> Linux/macOSWindows <pre><code>mv target/release/pyapp cowsay &amp;&amp; chmod +x cowsay\n</code></pre> <pre><code>mv target\\release\\pyapp.exe cowsay\n</code></pre>"},{"location":"how-to/#runtime","title":"Runtime","text":"<p>After you have distributed the binary to the user, they can execute it directly:</p> <pre><code>$ ./cowsay -t 'Hello, World!'\n  _____________\n| Hello, World! |\n  =============\n             \\\n              \\\n                ^__^\n                (oo)\\_______\n                (__)\\       )\\/\\\n                    ||----w |\n                    ||     ||\n</code></pre>"},{"location":"runtime/","title":"Runtime behavior","text":""},{"location":"runtime/#initialization","title":"Initialization","text":"<p>Applications will bootstrap themselves on the first run. All subsequent invocations will only check if the installation directory exists and nothing else, to maximize CLI responsiveness.</p> <p>Note</p> <p>The following diagram shows the possible behavior at runtime. The nodes with rounded edges are conditions and those with jagged edges are actions.</p> <p>Most nodes are clickable and will take you to the relevant documentation.</p> <pre><code>flowchart TD\n    INSTALLED([Installed]) -- No --&gt; DISTCACHED([Distribution cached])\n    INSTALLED -- Yes --&gt; MNG([Management enabled])\n    DISTCACHED -- No --&gt; DISTEMBEDDED([Distribution embedded])\n    DISTCACHED -- Yes --&gt; FULLISOLATION([Full isolation])\n    DISTEMBEDDED -- No --&gt; DISTSOURCE[[Cache from source]]\n    DISTEMBEDDED -- Yes --&gt; DISTEXTRACT[[Cache from embedded data]]\n    DISTSOURCE --&gt; FULLISOLATION\n    DISTEXTRACT --&gt; FULLISOLATION\n    FULLISOLATION -- No --&gt; UVENABLED([UV enabled])\n    UVENABLED -- No --&gt; VENV[[Create virtual environment]]\n    UVENABLED -- Yes --&gt; UVCACHED([UV cached])\n    UVCACHED -- No --&gt; DOWNLOADUV[[Download UV]]\n    UVCACHED -- Yes --&gt; VENV\n    DOWNLOADUV --&gt; VENV\n    FULLISOLATION -- Yes --&gt; UNPACK[[Unpack distribution directly]]\n    UNPACK --&gt; UVENABLEDUNPACK([UV enabled])\n    UVENABLEDUNPACK -- No --&gt; EXTERNALPIP[[External pip]]\n    UVENABLEDUNPACK -- Yes --&gt; UVCACHEDUNPACK([UV cached])\n    UVCACHEDUNPACK -- No --&gt; DOWNLOADUVUNPACK[[Download UV]]\n    EXTERNALPIP([External pip]) -- No --&gt; PROJEMBEDDED([Project embedded])\n    EXTERNALPIP -- Yes --&gt; PIPCACHED([pip cached])\n    PIPCACHED -- No --&gt; DOWNLOADPIP[[Download pip]]\n    PIPCACHED -- Yes --&gt; PROJEMBEDDED([Project embedded])\n    DOWNLOADPIP --&gt; PROJEMBEDDED\n    PROJEMBEDDED -- No --&gt; DEPFILE([Dependency file])\n    PROJEMBEDDED -- Yes --&gt; PROJEMBED[[Install from embedded data]]\n    DEPFILE -- No --&gt; SINGLEPROJECT[[Install single project]]\n    DEPFILE -- Yes --&gt; DEPFILEINSTALL[[Install from dependency file]]\n    UVCACHEDUNPACK -- Yes --&gt; PROJEMBEDDED\n    DOWNLOADUVUNPACK --&gt; PROJEMBEDDED\n    VENV --&gt; EXTERNALPIP\n    SINGLEPROJECT --&gt; MNG\n    DEPFILEINSTALL --&gt; MNG\n    PROJEMBED --&gt; MNG\n    MNG -- No --&gt; EXECUTE[[Execute project]]\n    MNG -- Yes --&gt; MNGCMD([Command invoked])\n    MNGCMD -- No --&gt; EXECUTE\n    MNGCMD -- Yes --&gt; MANAGE[[Run management command]]\n    click DISTEMBEDDED href \"../config/distribution/#embedding\"\n    click FULLISOLATION href \"../config/distribution/#full-isolation\"\n    click UVENABLED href \"../config/installation/#uv\"\n    click UVENABLEDUNPACK href \"../config/installation/#uv\"\n    click EXTERNALPIP href \"../config/installation/#externally-managed\"\n    click PROJEMBEDDED href \"../config/project/#embedding\"\n    click DEPFILE href \"../config/project/#dependency-file\"\n    click SINGLEPROJECT href \"../config/project/#identifier\"\n    click DEPFILEINSTALL href \"../config/project/#dependency-file\"\n    click PROJEMBED href \"../config/project/#embedding\"\n    click MNG href \"../config/cli/#management-command\"\n    click MNGCMD href \"../config/cli/#management-command\"\n    click MANAGE href \"#commands\"\n    click EXECUTE href \"../config/project/#execution-mode\"</code></pre>"},{"location":"runtime/#execution","title":"Execution","text":"<p>Projects are executed using <code>execvp</code> on non-Windows systems, replacing the process.</p> <p>To provide consistent behavior on each user's machine:</p> <ul> <li>Python runs projects in isolated mode</li> <li>When installing or upgrading projects, pip uses isolation (by default)</li> </ul>"},{"location":"runtime/#detection","title":"Detection","text":"<p>A single environment variable called <code>PYAPP</code> is injected with the value of <code>1</code> (by default) when running applications and may be used to detect this mode of installation versus others.</p>"},{"location":"runtime/#commands","title":"Commands","text":"<p>Built applications have a single top-level command group named <code>self</code> (by default) and all other invocations will be forwarded to your actual execution logic.</p>"},{"location":"runtime/#default","title":"Default","text":"<p>These commands are always exposed.</p>"},{"location":"runtime/#remove","title":"Remove","text":"<pre><code>&lt;EXE&gt; self remove\n</code></pre> <p>This will wipe the installation.</p>"},{"location":"runtime/#restore","title":"Restore","text":"<pre><code>&lt;EXE&gt; self restore\n</code></pre> <p>This will wipe the installation and then reinstall.</p>"},{"location":"runtime/#update","title":"Update","text":"<pre><code>&lt;EXE&gt; self update\n</code></pre> <p>This will update the project to the latest available version in the currently used distribution.</p>"},{"location":"runtime/#optional","title":"Optional","text":"<p>These commands are hidden by default and each can be individually exposed by setting its corresponding <code>PYAPP_EXPOSE_&lt;COMMAND&gt;</code> option (e.g. <code>PYAPP_EXPOSE_METADATA</code>) to <code>true</code> or <code>1</code>.</p> <p>You can enable all of them at once by setting the <code>PYAPP_EXPOSE_ALL_COMMANDS</code> option to <code>true</code> or <code>1</code>. Individual commands that are explicitly disabled (<code>PYAPP_EXPOSE_&lt;COMMAND&gt;</code> set to <code>false</code> or <code>0</code>) will not be exposed.</p>"},{"location":"runtime/#cache","title":"Cache","text":"<pre><code>&lt;EXE&gt; self cache [dist|pip|uv]\n</code></pre> <p>This is the command group for managing the cache. Each subcommand has a <code>-r</code>/<code>--remove</code> flag to remove the cached asset. Not passing that flag will display the location instead.</p>"},{"location":"runtime/#metadata","title":"Metadata","text":"<pre><code>&lt;EXE&gt; self metadata\n</code></pre> <p>This displays customized output based on a template.</p>"},{"location":"runtime/#pip","title":"pip","text":"<pre><code>&lt;EXE&gt; self pip\n</code></pre> <p>This directly invokes pip with the installed Python.</p>"},{"location":"runtime/#python","title":"Python","text":"<pre><code>&lt;EXE&gt; self python\n</code></pre> <p>This directly invokes the installed Python.</p>"},{"location":"runtime/#python-path","title":"Python path","text":"<pre><code>&lt;EXE&gt; self python-path\n</code></pre> <p>This outputs the path to the installed Python.</p>"},{"location":"users/","title":"Users","text":"<p>The following is not intended to be a complete enumeration. Be sure to view the development version of this page for an up-to-date listing.</p>"},{"location":"users/#projects","title":"Projects","text":"<p>AppleCrate | FreeMoCap | Hatch | instawow | Litestar | pdm | Plutus Terminal | Preservation Workbench | tidal-wave</p>"},{"location":"users/#industry","title":"Industry","text":"<ul> <li>Beam <sup>[1|2]</sup></li> <li>Blueshoe <sup>[1]</sup></li> <li>Datadog <sup>[1|2]</sup></li> </ul>"},{"location":"users/#academia","title":"Academia","text":"<ul> <li>\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne (EPFL)<ul> <li>Center for Imaging <sup>[1]</sup></li> </ul> </li> </ul>"},{"location":"config/cli/","title":"Command line configuration","text":""},{"location":"config/cli/#installation-indicator","title":"Installation indicator","text":"<p>The environment variable that is used for detection may be set to the path of the executable at runtime if you set the <code>PYAPP_PASS_LOCATION</code> option to <code>true</code> or <code>1</code>. This is useful if your application wishes to in some way manage itself.</p>"},{"location":"config/cli/#management-command","title":"Management command","text":"<p>You may set the <code>PYAPP_SELF_COMMAND</code> option to override the default name (<code>self</code>) of the management command group. Setting this to <code>none</code> effectively disables the use of management commands.</p> <p>When enabled, the value will be available at runtime as the <code>PYAPP_COMMAND_NAME</code> environment variable.</p>"},{"location":"config/cli/#metadata-template","title":"Metadata template","text":"<p>You may set a custom template used to output metadata with the <code>PYAPP_METADATA_TEMPLATE</code> option which supports the following placeholders:</p> Placeholder Description <code>{project}</code> The normalized project name <code>{version}</code> The currently installed version of the project <p>The default template is <code>{project} v{version}</code> if this option is unset.</p> <p>This is useful for setting custom commands for the Starship prompt. The following example configuration assumes that the built executable has been renamed to <code>foo</code>:</p> <pre><code>format = \"\"\"\n...\n${custom.foo}\\\n...\n$line_break\\\n...\n$character\"\"\"\n\n# &lt;clipped&gt;\n\n[custom.foo]\ncommand = \"foo self metadata\"\nwhen = true\n## Windows\n# shell = [\"cmd\", \"/C\"]\n## Other\n# shell = [\"sh\", \"--norc\"]\n</code></pre>"},{"location":"config/distribution/","title":"Python distribution configuration","text":""},{"location":"config/distribution/#known","title":"Known","text":"<p>Setting the <code>PYAPP_PYTHON_VERSION</code> option will determine the distribution used at runtime based on the environment at build time. If unset then the default will be the latest stable minor version of CPython.</p>"},{"location":"config/distribution/#cpython","title":"CPython","text":"ID <code>3.7</code> <code>3.8</code> <code>3.9</code> <code>3.10</code> <code>3.11</code> <code>3.12</code> <code>3.13</code> <code>3.14</code> <p>The source for pre-built distributions is the python-build-standalone project.</p>"},{"location":"config/distribution/#variants","title":"Variants","text":"<p>Some distributions have variants that may be configured. Options may be combined.</p> Option Platforms Allowed values <code>PYAPP_DISTRIBUTION_VARIANT_CPU</code> <ul><li>Linux</li></ul> <ul><li><code>v1</code></li><li><code>v2</code></li><li><code>v3</code> (default)</li><li><code>v4</code></li></ul> <code>PYAPP_DISTRIBUTION_VARIANT_GIL</code> <ul><li>Linux</li><li>Windows</li><li>macOS</li></ul> <ul><li><code>freethreaded</code></li></ul>"},{"location":"config/distribution/#pypy","title":"PyPy","text":"ID <code>pypy2.7</code> <code>pypy3.9</code> <code>pypy3.10</code> <code>pypy3.11</code> <p>The source of distributions is the PyPy project.</p>"},{"location":"config/distribution/#custom","title":"Custom","text":"<p>You may explicitly set the <code>PYAPP_DISTRIBUTION_SOURCE</code> option which overrides the known distribution settings. The source must be a URL that points to an archived version of the desired Python distribution.</p> <p>Setting this manually may require you to define extra metadata about the distribution that is required for correct runtime behavior.</p>"},{"location":"config/distribution/#format","title":"Format","text":"<p>The following formats are supported for the <code>PYAPP_DISTRIBUTION_FORMAT</code> option, with the default chosen based on the ending of the source URL:</p> Format Extensions Description <code>tar|bzip2</code> <ul><li><code>.tar.bz2</code></li><li><code>.bz2</code></li></ul> A tar file with bzip2 compression <code>tar|gzip</code> <ul><li><code>.tar.gz</code></li><li><code>.tgz</code></li></ul> A tar file with gzip compression <code>tar|zstd</code> <ul><li><code>.tar.zst</code></li><li><code>.tar.zstd</code></li></ul> A tar file with Zstandard compression <code>zip</code> <ul><li><code>.zip</code></li></ul> A ZIP file with DEFLATE compression"},{"location":"config/distribution/#python-location","title":"Python location","text":"<p>You may set the relative path to the Python executable after unpacking the archive with the <code>PYAPP_DISTRIBUTION_PYTHON_PATH</code> option. The default is <code>python.exe</code> on Windows and <code>bin/python3</code> on all other platforms.</p>"},{"location":"config/distribution/#site-packages-location","title":"Site packages location","text":"<p>You may set the relative path to the <code>site-packages</code> directory after unpacking the archive with the <code>PYAPP_DISTRIBUTION_SITE_PACKAGES_PATH</code> option. The default is <code>Lib\\site-packages</code> on Windows and <code>lib/python&lt;ID&gt;/site-packages</code> on all other platforms where <code>&lt;ID&gt;</code> is the defined distribution ID.</p>"},{"location":"config/distribution/#path-prefix","title":"Path prefix","text":"<p>If the Python executable and the <code>site-packages</code> directory are at the default locations but nested under top-level directories, you may set the <code>PYAPP_DISTRIBUTION_PATH_PREFIX</code> option to the common prefix of the two paths to avoid having to manually set those options.</p>"},{"location":"config/distribution/#pip-availability","title":"pip availability","text":"<p>You may indicate whether pip is already installed by setting the <code>PYAPP_DISTRIBUTION_PIP_AVAILABLE</code> option to <code>true</code> or <code>1</code>. This elides the check for installation when upgraded virtual environments are enabled.</p>"},{"location":"config/distribution/#embedding","title":"Embedding","text":"<p>You may set the <code>PYAPP_DISTRIBUTION_EMBED</code> option to <code>true</code> or <code>1</code> to embed the distribution in the executable at build time to avoid fetching it at runtime.</p> <p>You can set the <code>PYAPP_DISTRIBUTION_PATH</code> option to use a local path rather than fetching the source, which implicitly enables embedding. The local archive should be similar to the default distributions in that there should be a Python interpreter ready for use.</p>"},{"location":"config/distribution/#full-isolation","title":"Full isolation","text":"<p>You may set the <code>PYAPP_FULL_ISOLATION</code> option to <code>true</code> or <code>1</code> to provide each installation with a full copy of the distribution rather than a virtual environment.</p>"},{"location":"config/installation/","title":"Installation configuration","text":"<p>These options have no effect when the project installation is disabled.</p>"},{"location":"config/installation/#uv","title":"UV","text":"<p>You may set the <code>PYAPP_UV_ENABLED</code> option to <code>true</code> or <code>1</code> to use UV for virtual environment creation and project installation.</p>"},{"location":"config/installation/#uv-version","title":"Version","text":"<p>You may use a specific <code>X.Y.Z</code> version by setting the <code>PYAPP_UV_VERSION</code> option.</p> <p>By default, a version of UV that has already been downloaded by a PyApp application is used. If UV has not yet been downloaded then the latest version is used.</p>"},{"location":"config/installation/#only-bootstrap","title":"Only bootstrap","text":"<p>You may set the <code>PYAPP_UV_ONLY_BOOTSTRAP</code> option to <code>true</code> or <code>1</code> to only use UV for virtual environment creation and continue using pip for project installation.</p>"},{"location":"config/installation/#source","title":"Source","text":"<p>You may explicitly set the <code>PYAPP_UV_SOURCE</code> option in order to download your own UV release archive. This takes precedence over any defined version.</p> <p>The value must end with the archive's real file extension, which is used to determine the extraction method.</p>"},{"location":"config/installation/#pip","title":"pip","text":"<p>These options have no effect when UV is enabled.</p>"},{"location":"config/installation/#externally-managed","title":"Externally managed","text":"<p>You may set the <code>PYAPP_PIP_EXTERNAL</code> option to <code>true</code> or <code>1</code> to use the standalone versions of pip rather than whatever the distribution provides.</p> <p>By default, the latest version is used. You may use a specific <code>X.Y.Z</code> version by setting the <code>PYAPP_PIP_VERSION</code> option.</p> <p>Tip</p> <p>This provides a significant installation speed up when full isolation is not enabled.</p>"},{"location":"config/installation/#allowing-configuration","title":"Allowing configuration","text":"<p>You may set the <code>PYAPP_PIP_ALLOW_CONFIG</code> option to <code>true</code> or <code>1</code> to allow the use of environment variables and other configuration at runtime.</p>"},{"location":"config/installation/#virtual-environments","title":"Virtual environments","text":"<p>When full isolation is not enabled, you may set the <code>PYAPP_UPGRADE_VIRTUALENV</code> option to <code>true</code> or <code>1</code> to create virtual environments with virtualenv rather than the standard library's <code>venv</code> module.</p>"},{"location":"config/installation/#extra-installer-arguments","title":"Extra installer arguments","text":"<p>You may set the <code>PYAPP_PIP_EXTRA_ARGS</code> option to provide extra arguments to the <code>pip install</code> (or UV equivalent) command at runtime when installing or updating the project e.g. <code>--only-binary :all: --extra-index-url URL</code>.</p>"},{"location":"config/installation/#location","title":"Location","text":"<p>The default location of your application's installation differs based on the operating system and can be overridden at runtime with the <code>PYAPP_INSTALL_DIR_&lt;PROJECT_NAME&gt;</code> environment variable where <code>&lt;PROJECT_NAME&gt;</code> is the uppercased version of the project name.</p>"},{"location":"config/installation/#skipping-installation","title":"Skipping installation","text":"<p>You may set the <code>PYAPP_SKIP_INSTALL</code> option to <code>true</code> or <code>1</code> to skip installing the project in the distribution. This allows for entirely predefined distributions and thus no network calls at runtime if used in conjunction with distribution embedding.</p> <p>When project installation is skipped, the <code>update</code> command will not be available. You may set the <code>PYAPP_ALLOW_UPDATES</code> option to <code>true</code> or <code>1</code> to expose the command anyway. Be sure to set the appropriate project options as configuring a prebuilt distribution does not require those.</p>"},{"location":"config/project/","title":"Project configuration","text":""},{"location":"config/project/#sources","title":"Sources","text":"<p>There are 3 ways to configure runtime installation, none of which will occur when disabled.</p> <p>The project identifier must be known in all cases.</p>"},{"location":"config/project/#identifier","title":"Identifier","text":"<p>The desired project name and version are configured with the <code>PYAPP_PROJECT_NAME</code> and <code>PYAPP_PROJECT_VERSION</code> options, respectively. The project name must adhere to PEP 508 and will be normalized during builds according to PEP 503.</p> <p>When using only this method, the package will be installed from a package index like PyPI.</p>"},{"location":"config/project/#dependency-file","title":"Dependency file","text":"<p>You may install your project using a dependency file with the <code>PYAPP_PROJECT_DEPENDENCY_FILE</code> option which should be a local path to the file. In this mode, the project identifier has nothing to do with installation and is just used as metadata.</p> <p>The following formats are supported:</p> Extensions Description <code>.txt</code><code>.in</code> This is the requirements file format"},{"location":"config/project/#embedding","title":"Embedding","text":"<p>You may embed the project with the <code>PYAPP_PROJECT_PATH</code> option which should be a path to a wheel ending in <code>.whl</code> or a source distribution ending in <code>.tar.gz</code>.</p> <p>Note</p> <p>The project identifier is automatically derived from the metadata files inside.</p>"},{"location":"config/project/#features","title":"Features (extras)","text":"<p>You may set the <code>PYAPP_PROJECT_FEATURES</code> option to select optional dependency groups that would usually be passed to installers within square brackets after the package name e.g. <code>pkg[foo,bar]</code>. In that example, you would set <code>PYAPP_PROJECT_FEATURES</code> to <code>foo,bar</code>.</p> <p>This also works when embedding the project.</p>"},{"location":"config/project/#execution-mode","title":"Execution mode","text":"<p>The following options are mutually exclusive:</p> Option Description <code>PYAPP_EXEC_MODULE</code> This is the name of the module to execute via <code>python -m &lt;MODULE&gt;</code> <code>PYAPP_EXEC_SPEC</code> This is an object reference to execute e.g. <code>pkg.foo:cli</code> <code>PYAPP_EXEC_CODE</code> This is arbitrary code to run via <code>python -c &lt;CODE&gt;</code> (the spec option uses this internally) <code>PYAPP_EXEC_SCRIPT</code> This is a path to a script to embed in the binary and run <code>PYAPP_EXEC_NOTEBOOK</code> This is a path to a Jupyter notebook (<code>.ipynb</code> file) to embed in the binary and run <p>If none are set then the <code>PYAPP_EXEC_MODULE</code> option will default to the value of <code>PYAPP_PROJECT_NAME</code> with hyphens replaced by underscores.</p>"},{"location":"config/project/#gui","title":"GUI","text":"<p>If you are packaging a graphical user interface (GUI), you can set  <code>PYAPP_IS_GUI</code> to <code>true</code> or <code>1</code>.</p> <p>On Windows, this will use <code>pythonw.exe</code> instead of <code>python.exe</code> to execute the application, which avoids a console window from appearing. Running a GUI application with <code>pythonw.exe</code> means that all <code>stdout</code> and <code>stderr</code> output from your GUI will be discarded.</p> <p>Otherwise, the application will execute as usual. PyApp will run your GUI by spawning a new process, such that the console window that runs the application terminates after successful spawning.</p> <p>Even when <code>PYAPP_IS_GUI</code> is enabled you can still run the application from the command line. Furthermore, PyApp-specific logic (e.g. installation and setup) will still display a console window with status messages.</p> <p>Note</p> <p>On macOS, the console by default does not automatically close when processes have terminated (however it can be closed manually without interferring with the GUI). The default console behavior can be changed in the user settings to close after the last process terminates successfully.</p>"}]}